from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import * 
from wired_module import * 
#	Generated By WiredQT for Python: by Rocky Nuarin, 2021 Phils
class Handler(QtWidgets.QWidget,usercontrol):
	def __init__(self, *param):    
		super(Handler, self).__init__(None)
		w,h=DeskTopSize()
		initUI(self,param,w=w,h=h,title="WiredQTv5.0",controlbox=True,startpos=(0,30),timeoutdestroy=-1)
		self.GTKForms()
		self.timer=QtCore.QTimer()
		self.timer.timeout.connect(self.loop)
		self.timer.start(10)       

		self.sch=Scheduler(5000)#500 ms
		self.sch.Start()
		self.filename=app_path()+"/dummy.b4a"
		if FileExist('forms.txt')==True:
			strs=GetFileStr('forms.txt')
			self.QLineEdit1.Text=strs
		if FileExist('path.txt')==True:
			strs=GetFileStr('path.txt')
			self.QLabel5.Text=strs
			self.filename=strs
		import glob
		lst=glob.glob("frm*.bas")
		self.QListWidget6.List=lst
	def createwidget(self,prop,control,parent,event=[]):
		createWidget(self,prop,control,parent,event)         
	def GTKForms(self):
		self.createwidget("{'Name': 'QTextEdit0', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '85', 'Width': '445', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': [], 'Height': '415', 'Left': '0', 'Tag': '', 'Text': 'QTextEdit0', 'Help': ''}",'QTextEdit','usercontrol',"[]")
		self.createwidget("{'Name': 'QLineEdit1', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '55', 'Width': '615', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': [], 'Height': '30', 'Left': '0', 'Tag': '', 'Text': 'frmmain,frmcontrol', 'Help': ''}",'QLineEdit','usercontrol',"[]")
		self.createwidget("{'Name': 'QPushButton2', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '15', 'Width': '80', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': '[pressed]', 'Height': '40', 'Left': '0', 'Tag': '', 'Text': 'Generate', 'Help': ''}",'QPushButton','usercontrol',"[['pressed', 'self'], ['released', 'self']]")
		self.createwidget("{'Name': 'QFileDialog3', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '20', 'Width': '80', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'False', 'BackColor': '(1,1,1,0.25)', 'Events': [], 'Height': '30', 'Left': '155', 'Tag': '', 'Text': '', 'Help': ''}",'QFileDialog','usercontrol',"[]")
		self.createwidget("{'Name': 'QPushButton4', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '15', 'Width': '120', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': '[pressed]', 'Height': '40', 'Left': '255', 'Tag': '', 'Text': 'b4a project path', 'Help': ''}",'QPushButton','usercontrol',"[['pressed', 'self'], ['released', 'self']]")
		self.createwidget("{'Name': 'QLabel5', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '20', 'Width': '495', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': [], 'Height': '30', 'Left': '380', 'Tag': '', 'Text': 'QLabel5', 'Help': ''}",'QLabel','usercontrol',"[]")
		self.createwidget("{'Name': 'QListWidget6', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '155', 'Width': '275', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': '[itemDoubleClicked]', 'Height': '225', 'Left': '480', 'Tag': '', 'Text': '', 'Help': ''}",'QListWidget','usercontrol',"[['itemDoubleClicked', 'self,arg1'], ['currentTextChanged', 'self,arg1']]")
		self.createwidget("{'Name': 'QPushButton7', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '55', 'Width': '70', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': '[released]', 'Height': '30', 'Left': '620', 'Tag': '', 'Text': 'Clear', 'Help': ''}",'QPushButton','usercontrol',"[['released', 'self']]")
	def Widget(self):
		return self    
	def loop(self):
		if self.form_load==False:
			self.form_load=True
		if self.sch.Event():#timer routine
			#code here
			if self.timeoutdestroy!=-1:
				self.timeoutdestroy-=1
				if self.timeoutdestroy==0:
					pass#self.unload(None)
			self.sch.Start()#restart scheduler      
	def closeEvent(self, event):
		# do stuff
		if 1:
			event.accept() # let the window close
			self.timer.timeout.disconnect()
			del self	
		else:
			event.ignore()	
	def resizeEvent(self, event):
		# do stuff
		return super(Handler, self).resizeEvent(event)				
	def connect(self,ev,evusr):
		self.wiredevents.update({ev:evusr})     
	def activeXcreated(self,*args):
		pass    
	def eventFilter(self, obj, event):
		'''
		if obj==self.QTextEdit1.obj:
			if event.type() == QtCore.QEvent.KeyPress:
				print(event.key())     
		'''
		return super(Handler, self).eventFilter(obj, event)
	

	def QPushButton2_released(self):
		SaveFileStr('forms.txt',self.QLineEdit1.Text)
		a=self.QLineEdit1.Text.split(",")
		dimlst=[]
		strs="Sub Globals\r\n"
		create="Sub Activity_Create(FirstTime As Boolean)\r\n"
		create+="	If FirstTime=True Then\r\n"
		create+='		Activity.LoadLayout("Layout1")\r\n'
		create+='		\'Activity.AddMenuItem3("", "refresh", xui.LoadBitmapResize(File.DirAssets, "ic_cached_white_24dp.png", 32dip, 32dip, True), True)\r\n'
		create+='		\'Activity.AddMenuItem3("", "done", xui.LoadBitmapResize(File.DirAssets, "ic_done_white_24dp.png", 32dip, 32dip, True), True)\r\n'
		create+='		\'Activity.AddMenuItem3("", "blue", xui.LoadBitmapResize(File.DirAssets, "bt.png", 32dip, 32dip, True), True)\r\n'
		create+='		Activity.Title="MyTitle"\r\n'
		createlst=[]
		activitylst=[]
		#activity='Sub Activity_Resume\r\n'
		activity=""
		globals='\r\n\r\n\'Starter\r\n\r\n'
		globalslst=[]
		globals+='Sub Process_Globals\r\n'
		for i,b in enumerate(a):
			strs+= "\tPrivate " + b + "1 " + "As " + b+"\r\n"
			dimlst.append("\tPrivate " + b + "1 " + "As " + b)
			if i==0:
				val="True"
			else:
				val="False"
			create+="\t\t"+b+"1.SetLayout(0,0,100%x,100%y)\r\n"
			create+="\t\t"+b+"1.Visible=%s\r\n"%(val)
			createlst.append("\t\t"+b+"1.SetLayout(0,0,100%x,100%y)")
			createlst.append("\t\t"+b+"1.Visible=%s"%(val))
			#activity+="	Starter.%s1=%s1\r\n" %(b,b)
			activitylst.append("	Starter.%s1=%s1" %(b,b))
			globals+="	Dim " + b +"1 As Object\r\n"  
			globalslst.append("	Dim " + b +"1 As Object")



		create+="\tEnd If\r\n"
		create+="End Sub\r\n"
		strs+="End Sub\r\n"
		#activity+="End Sub\r\n"
		for i,b in enumerate(a):
			activity+='\r\ndim %s1 as %s=Starter.%s1\r\n' %(b,b,b)
			activity+='%s1.Visible=True\r\n'%(b)
			activity+='setVisible(False)\r\n\r\n'
		
		
		
		globals+="End Sub\r\n"


		#self.QTextEdit0.Text=strs
		#self.QTextEdit0.Text+=create
		self.QTextEdit0.Text=activity

		#self.QTextEdit0.Text+=globals
		
		
		self.QPushButton4_released()
		fname=self.filename
		if fname.find(".b4a")==-1:
			print("please select b4a project!!!")
			return
		
		for iia,xxa in enumerate(dimlst):
			fnd=getCSV(0,",",dimlst[iia])
			if self.isExist(fname,fnd)==-1:
				self.willInsert(fname,"Sub Globals",xxa)		

		for iia,xxa in enumerate(createlst):
			fnd=getCSV(0,",",createlst[iia])
			if self.isExist(fname,fnd)==-1:
				self.willInsert(fname,"Sub Activity_Create(FirstTime As Boolean)",xxa)		

		for iia,xxa in enumerate(activitylst):
			fnd=getCSV(0,",",activitylst[iia])
			if self.isExist(fname,fnd)==-1:
				self.willInsert(fname,"Activity_Resume",xxa)		


		fname=GetPath(self.filename)+'Starter.bas'
		
		for iia,xxa in enumerate(globalslst):
			fnd=getCSV(0,",",globalslst[iia])
			if self.isExist(fname,fnd)==-1:
				self.willInsert(fname,"Sub Process_Globals",xxa)		

		
		SaveFileStr('path.txt',self.QLabel5.Text)
		pass
	def SaveFileStr(self,fname,str_to_write):
		fname=fname.replace('\\','/')
		fo = open(fname, "wb")
		fo.write(str_to_write.encode());
		fo.close()

	def GetFileStr(self,fname):
		fname=fname.replace('\\','/')
		fo = open(fname, "rb+")
		str = fo.read(GetFileSize(fname)).decode()
		return str
	def isExist(self,fname,fnd):
		
		s=self.GetFileStr(fname)
		strs=""
		for i,a in enumerate(s.split("\r\n")):
			if a.find( fnd)!=-1:
				return i 
		return -1	
		pass
	def willInsert(self,fname,fnd,insert):
		s=self.GetFileStr(fname)
		strs=""
		found=0
		for a in s.split("\r\n"):
			if a.find(fnd)!=-1:
				found+=1
			if a.find("End Sub")!=-1 and found==1:
				found=2
				a=insert+"\r\nEnd Sub"
			strs+=a+"\r\n"
		self.SaveFileStr(fname,strs)

	def willModify(self,fname,fnd,replace):
		#self.SerialPort0.println(self.QLineEdit2.Text)
		s=self.GetFileStr(fname)
		strs=""
		for a in s.split("\r\n"):
			if a.find(fnd)!=-1:
				a=replace
			strs+=a+"\r\n"
		self.SaveFileStr(fname,strs)

	def QPushButton4_released(self):
		self.setWindowState(QtCore.Qt.WindowMaximized)
		if self.filename!="":
			path=GetPath(self.filename)
		else:
			path=os.path.expanduser('~')
		self.QFileDialog3.obj.setDirectory(path)
		
		ret=self.QFileDialog3.obj.getOpenFileName()

		self.filename=ret[0]
		self.QLabel5.Text=self.filename
		pass
	
	
	
	
	def QPushButton7_released(self):
		self.QLineEdit1.Text=""
		pass
	
	def QListWidget6_currentTextChanged(self,arg1):
		if self.QLineEdit1.Text=="":
			self.QLineEdit1.Text+=arg1
		else:
			self.QLineEdit1.Text+=","+arg1
		pass
if __name__ == '__main__':
	import sys
	app = QtWidgets.QApplication(sys.argv)
	w = Handler()
	w.show()
	sys.exit(app.exec_())
